name: CI

on:
  push:
    branches: [ main ]
    paths:
      - '**.java'
      - '**/pom.xml'
      - 'auth-server/**'
      - 'resource-server/**'
      - 'client-app/**'
      - 'client-ui/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**.java'
      - '**/pom.xml'
      - 'auth-server/**'
      - 'resource-server/**'
      - 'client-app/**'
      - 'client-ui/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      publish:
        description: "Build & push GHCR images (only honored on main by default)"
        required: false
        default: "false"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  DOCKER_BUILDKIT: 1

jobs:
  # ---------- Java services ----------
  java-build-test:
    name: Java • ${{ matrix.module }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        module: [ "auth-server", "resource-server", "client-app" ]
    defaults:
      run:
        working-directory: ${{ matrix.module }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Temurin JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'
          cache: maven

      - name: Maven test & package
        run: mvn -B -DskipTests=false test package

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.module }}-jar
          path: ${{ matrix.module }}/target/*.jar
          if-no-files-found: warn

  # ---------- Node/Vite apps (auto-detect npm/yarn/pnpm & cache safely) ----------
  node-build-test:
    name: Node • ${{ matrix.app }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: [ "client-ui" ]  # removed auth-server-custom-sign-in
    steps:
      - uses: actions/checkout@v4

      - name: Detect package manager & lockfile
        id: detect
        run: |
          set -e
          APP="${{ matrix.app }}"
          cd "$APP"
          if [ -f pnpm-lock.yaml ]; then
            echo "mgr=pnpm" >> $GITHUB_OUTPUT
            echo "lock=pnpm-lock.yaml" >> $GITHUB_OUTPUT
          elif [ -f yarn.lock ]; then
            echo "mgr=yarn" >> $GITHUB_OUTPUT
            echo "lock=yarn.lock" >> $GITHUB_OUTPUT
          elif [ -f package-lock.json ]; then
            echo "mgr=npm" >> $GITHUB_OUTPUT
            echo "lock=package-lock.json" >> $GITHUB_OUTPUT
          elif [ -f npm-shrinkwrap.json ]; then
            echo "mgr=npm" >> $GITHUB_OUTPUT
            echo "lock=npm-shrinkwrap.json" >> $GITHUB_OUTPUT
          else
            echo "mgr=none" >> $GITHUB_OUTPUT
            echo "lock=" >> $GITHUB_OUTPUT
          fi

      - name: Use Node.js 20 (with cache)
        if: steps.detect.outputs.mgr != 'none'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: ${{ steps.detect.outputs.mgr }}
          cache-dependency-path: ${{ matrix.app }}/${{ steps.detect.outputs.lock }}

      - name: Use Node.js 20 (no cache)
        if: steps.detect.outputs.mgr == 'none'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack for yarn/pnpm
        if: steps.detect.outputs.mgr != 'npm' && steps.detect.outputs.mgr != 'none'
        run: corepack enable

      - name: Install dependencies
        run: |
          set -e
          APP="${{ matrix.app }}"
          cd "$APP"
          case "${{ steps.detect.outputs.mgr }}" in
            pnpm) pnpm install --frozen-lockfile ;;
            yarn) yarn install --frozen-lockfile ;;
            npm)  npm ci ;;
            none) echo "No lockfile found — falling back to npm install"; npm install ;;
          esac

      - name: Lint (if present)
        run: |
          APP="${{ matrix.app }}"
          cd "$APP"
          case "${{ steps.detect.outputs.mgr }}" in
            pnpm) pnpm run -s lint --if-present ;;
            yarn) yarn -s run lint || true ;;
            *)    npm run -s lint --if-present ;;
          esac

      - name: Test (if present)
        run: |
          APP="${{ matrix.app }}"
          cd "$APP"
          case "${{ steps.detect.outputs.mgr }}" in
            pnpm) pnpm run -s test --if-present ;;
            yarn) yarn -s run test || true ;;
            *)    npm run -s test --if-present ;;
          esac

      - name: Build (if present)
        run: |
          APP="${{ matrix.app }}"
          cd "$APP"
          case "${{ steps.detect.outputs.mgr }}" in
            pnpm) pnpm run -s build --if-present ;;
            yarn) yarn -s run build || true ;;
            *)    npm run -s build --if-present ;;
          esac

      - name: Upload web build
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-web-build
          path: |
            ${{ matrix.app }}/dist
            ${{ matrix.app }}/build
          if-no-files-found: warn

  # ---------- Compose build validation ----------
  docker-validate:
    name: Docker Compose • build
    runs-on: ubuntu-latest
    needs: [ java-build-test, node-build-test ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compose build (images only)
        run: |
          docker compose version
          docker compose build --no-cache

  # ---------- Smoke test: start only auth-server + deps ----------
  smoke-auth-server:
    name: Smoke • auth-server (discovery & health)
    runs-on: ubuntu-latest
    needs: docker-validate
    env:
      POSTGRES_DB: oauth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
      AUTH_DCR_INITIAL_TOKEN: dev-dcr-token-123
      AUTH_DCR_REQUIRE_INITIAL_TOKEN: "true"
      SERVER_FORWARD_HEADERS: framework
      AUTH_ISSUER_URI: http://localhost:8080
    steps:
      - uses: actions/checkout@v4

      - name: Install jq (for pretty output)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Create CI override for minimal stack
        run: |
          cat > docker-compose.ci.yml <<'YAML'
          services:
            postgres:
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
                interval: 2s
                timeout: 2s
                retries: 30
            redis:
              healthcheck:
                test: ["CMD", "redis-cli", "ping"]
                interval: 2s
                timeout: 2s
                retries: 30
            auth-server:
              depends_on:
                postgres:
                  condition: service_healthy
                redis:
                  condition: service_started
          YAML

      - name: Build minimal images
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml build postgres redis auth-server

      - name: Start minimal stack
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml up -d postgres redis auth-server
          docker compose ps

      - name: Wait for OIDC discovery (/.well-known/openid-configuration)
        run: |
          for i in {1..60}; do
            if curl -fsS http://localhost:8080/.well-known/openid-configuration >/dev/null; then
              echo "OIDC discovery is up"; exit 0
            fi
            sleep 2
          done
          echo "Timed out waiting for OIDC discovery"; exit 1

      - name: Probe OIDC discovery
        run: curl -fsS http://localhost:8080/.well-known/openid-configuration | jq '.issuer,.authorization_endpoint,.token_endpoint' -c

      - name: Probe actuator health (best effort)
        run: |
          set -e
          curl -fsS http://localhost:8080/actuator/health || echo "Actuator not exposed; discovery succeeded."

      - name: Dump logs on failure
        if: failure()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml logs --no-color > compose-logs.txt || true
          tail -n +1 compose-logs.txt || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-auth-server-logs
          path: compose-logs.txt
          if-no-files-found: ignore

      - name: Teardown
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml down -v

  # ---------- Publish images to GHCR on main ----------
  publish-ghcr:
    name: Publish images to GHCR
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ java-build-test, node-build-test, docker-validate, smoke-auth-server ]
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_OWNER: ${{ github.repository_owner }}
    steps:
      - uses: actions/checkout@v4

      - name: Lowercase owner (GHCR requires lowercase)
        id: lc
        run: |
          owner="${{ env.IMAGE_OWNER }}"
          echo "owner_lc=${owner,,}" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ steps.lc.outputs.owner_lc }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push auth-server
        uses: docker/build-push-action@v6
        with:
          context: ./auth-server
          push: true
          tags: |
            ghcr.io/${{ steps.lc.outputs.owner_lc }}/sentinel-auth-server:latest
            ghcr.io/${{ steps.lc.outputs.owner_lc }}/sentinel-auth-server:${{ github.sha }}

      - name: Build & push resource-server
        uses: docker/build-push-action@v6
        with:
          context: ./resource-server
          push: true
          tags: |
            ghcr.io/${{ steps.lc.outputs.owner_lc }}/sentinel-resource-server:latest
            ghcr.io/${{ steps.lc.outputs.owner_lc }}/sentinel-resource-server:${{ github.sha }}

      - name: Build & push client-app
        uses: docker/build-push-action@v6
        with:
          context: ./client-app
          push: true
          tags: |
            ghcr.io/${{ steps.lc.outputs.owner_lc }}/sentinel-client-app:latest
            ghcr.io/${{ steps.lc.outputs.owner_lc }}/sentinel-client-app:${{ github.sha }}

      - name: Build & push client-ui
        uses: docker/build-push-action@v6
        with:
          context: ./client-ui
          push: true
          tags: |
            ghcr.io/${{ steps.lc.outputs.owner_lc }}/sentinel-client-ui:latest
            ghcr.io/${{ steps.lc.outputs.owner_lc }}/sentinel-client-ui:${{ github.sha }}

  # ---------- Meta gate ----------
  all-green:
    name: ✅ All checks
    runs-on: ubuntu-latest
    needs: [ publish-ghcr ]
    steps:
      - run: echo "All CI jobs passed."
